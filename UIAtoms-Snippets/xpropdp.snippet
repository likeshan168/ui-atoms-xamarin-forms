<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
    <CodeSnippet Format="1.0.0">
        <Header>
            <Title>Define a BindableProperty</Title>
            <Shortcut>propbp</Shortcut>
            <Description>Code snippet for a property using BindableProperty as the backing store</Description>
            <Author>NeuroSpeech Technologies Pvt Ltd</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Snippet>
            <Declarations>
                <Literal>
                    <ID>type</ID>
                    <ToolTip>Property Type</ToolTip>
                    <Default>int</Default>
                </Literal>
                <Literal>
                    <ID>property</ID>
                    <ToolTip>Property Name</ToolTip>
                    <Default>MyProperty</Default>
                </Literal>
                <Literal>
                    <ID>ownerclass</ID>
                    <ToolTip>The owning class of this Property.  Typically the class that it is declared in.</ToolTip>
                    <Default>ownerclass</Default>
                </Literal>
                <Literal>
                    <ID>defaultvalue</ID>
                    <ToolTip>The default value for this property.</ToolTip>
                    <Default>0</Default>
                </Literal>
            </Declarations>
            <Code Language="csharp">
                <![CDATA[

        #region Property $property$
        
        /// <summary>
        /// Bindable Property $property$
        /// </summary>
        public static readonly BindableProperty $property$Property = BindableProperty.Create(
          nameof($property$),
          typeof($type$),
          typeof($ownerclass$),
          $defaultvalue$,
          BindingMode.OneWay,
          // validate value delegate
          // (sender,value) => true
          null,
          // property changed, delegate
          //(sender,oldValue,newValue) => (($ownerclass$)sender).On$property$Changed(oldValue,newValue),
          null,
          // property changing delegate
          // (sender,oldValue,newValue) => {}
          null,
          // coerce value delegate 
          // (sender,value) => value
          null,
          // create default value delegate
          // () => Default(T)
          null
        );

        /*
        /// <summary>
        /// On $property$ changed
        /// </summary>
        /// <param name="oldValue">Old Value</param>
        /// <param name="newValue">New Value</param>
        protected virtual void On$property$Changed(object oldValue, object newValue)
        {
            
        }*/


        /// <summary>
        /// Property $property$
        /// </summary>
        public $type$ $property$
        {
            get
            {
                return ($type$)GetValue($property$Property);
            }
            set
            {
                SetValue($property$Property, value);
            }
        }
        #endregion

$end$]]>
            </Code>
        </Snippet>
    </CodeSnippet>
</CodeSnippets>
